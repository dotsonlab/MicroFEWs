#include <Wire.h>
#include <Adafruit_RGBLCDShield.h>
#include <utility/Adafruit_MCP23017.h>
#include "RTClib.h"
RTC_DS3231 rtc;
Adafruit_RGBLCDShield lcd = Adafruit_RGBLCDShield();
#define RED 0x1
#define YELLOW 0x3
#define GREEN 0x2
#define TEAL 0x6
#define BLUE 0x4
#define VIOLET 0x5
#define WHITE 0x7

//Real time clock dates incase you want weekends to act differently than weekdays
char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

//These are the digital pin numbers and what they turn on and off
int en1 = 2; //stepper function 
int step1 = 3; //stepper function
int dir1 = 4; //stepper function
int decantvalves = 5; //opens the decant valves
int fillpumps = 6; //turns on masterflex to fill SBR tanks
int air = 9; //Controls the air pump


//These are other variables set up for calculations. Float indicates a number with a decimal. Int indicates a whole number
int x=0;
float starttime;
float realstarttime;
float begintime;
float tank;
float airtimer;

//This is the setup section that the code runs through once before doing the "loop" section over and over
void setup() {
  pinMode(en1, OUTPUT);
  pinMode(decantvalve, OUTPUT);
  pinMode(step1, OUTPUT);
  pinMode(fillpump, OUTPUT);
  pinMode(dir1, OUTPUT);
  pinMode(air, OUTPUT);
  digitalWrite(en1, HIGH);
  lcd.begin(16, 2);
   if (! rtc.begin()) {
     lcd.print("Couldn't find RTC");
    while (1);
 Alarm.alarmRepeat(0,0,0, normalsequence)
 Alarm.alarmRepeat(8,0,0, normalsequence)
 Alarm.alarmRepeat(16,0,0, normalsequence)
 }

  if (rtc.lostPower()) {
    lcd.print("RTC lost power, lets set the time!");
    // following line sets the RTC to the date & time this sketch was compiled
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    // This line sets the RTC with an explicit date & time, for example to set
    // January 21, 2014 at 3am you would call:
    // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));
  }
  // Print a message to the LCD. We track how long it takes since
  // this library has been optimized a bit and we're proud of it :)
  lcd.print("start!");
  lcd.setBacklight(WHITE);
  Alarm.delay(5000);
  lcd.clear();
  lcd.setCursor(0,1);
  
}
uint8_t i=0;


void fill(float duration){ //fill by time
  duration=duration*60*1000;
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Fill ");
  lcd.setBacklight(TEAL);
  float starttime = millis();
  Alarm.delay(100);
  while (((millis()-starttime)<duration)){
    digitalWrite(fillpumps, HIGH); //turns on the pump to fill the SBR
    int timedisplay = round((duration-(millis()-starttime))/60/1000);
    Alarm.delay(1000);
  lcd.setCursor(0,1);
  lcd.print(timedisplay);lcd.print("min  ");} 
}
  digitalWrite(fillpumps, LOW); //turns off the pump
}

void periodicaeration(float ontime){//on for 15 min freq is 60 min
  ontime=ontime*60;
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("PeriodicAeration ");
  DateTime now = rtc.now();
  float tt = now.unixtime();
  float current=tt;
  int timedisplay = round((ontime-(current-tt))/60);
  while ((current-tt) < ontime){
    timedisplay = round((ontime-(current-tt))/60);
 
 lcd.setCursor(0,1);
  lcd.print(timedisplay);
  lcd.print("min");
  Alarm.delay(1000);
  digitalWrite(air, HIGH);
  now = rtc.now();
  current = now.unixtime();
  }
digitalWrite(air, LOW);
digitalWrite(stir, LOW);  
}
void aeration(float airduration){//duration in min keep air on and pumps off for time period
  airduration=airduration*60*1000; //converting the number from minutes to milliseconds
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Aeration ");
  lcd.setBacklight(GREEN);
  float starttime = millis();
  Alarm.delay(100);
  while (((millis()-starttime)<airduration)){  
    digitalWrite(air, HIGH);
    int timedisplay = round((airduration-(millis()-starttime))/60/1000);
    lcd.setCursor(0,1);
    lcd.print(timedisplay);lcd.print("min  ");
   }
    digitalWrite(air, LOW);
}
void thirtysecaeration(float airduration){//duration in min keep air on and pumps off for time period
  airduration=airduration*60*1000; //converting the number from minutes to milliseconds
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("30Aeration ");
  lcd.setBacklight(GREEN);
  float starttime = millis();
  Alarm.delay(100);
  while (((millis()-starttime)<airduration)){  
    digitalWrite(air, HIGH);
    Alarm.delay(30000); //air on for 30 seconds
    digitalWrite(air, LOW);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000); //air off for 4 minutes

    int timedisplay = round((airduration-(millis()-starttime))/60/1000);
    lcd.setCursor(0,1);
    lcd.print(timedisplay);lcd.print("min  ");
    }
    digitalWrite(air, LOW);
}
void halftimeair(float airduration){//duration in min check depth and keep air on and pumps off for time period
  airduration=airduration*60*1000; //converting the number from minutes to milliseconds
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("halftimeAir ");
  lcd.setBacklight(GREEN);
  float starttime = millis();
  Alarm.delay(100);
  while (((millis()-starttime)<airduration)){  
    digitalWrite(air, HIGH);
    Alarm.delay(30000); 
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000); //air on for 5 minutes
    digitalWrite(air, LOW);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000); //air off for 5 minutes

    int timedisplay = round((airduration-(millis()-starttime))/60/1000);
    lcd.setCursor(0,1);
    lcd.print(timedisplay);lcd.print("min  ");
  
    }
    digitalWrite(air, LOW);
}
void oneonthreeoffair(float airduration, int lvl){//duration in min check depth and keep air on and pumps off for time period
  airduration=airduration*60*1000;
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("halftimeAir ");
  lcd.setBacklight(GREEN);
  float starttime = millis();
  Alarm.delay(100);
  while (((millis()-starttime)<airduration)&&(tank>lvl)){  
    digitalWrite(air, HIGH);
    Alarm.delay(30000);
    Alarm.delay(30000);
    digitalWrite(air, LOW);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    Alarm.delay(30000);
    int timedisplay = round((airduration-(millis()-starttime))/60/1000);
    
    lcd.setCursor(0,1);
    lcd.print(timedisplay);lcd.print("min  ");
    }
    digitalWrite(air, LOW);
}
void settle(float duration){//everything off just timer
  duration=duration*60*1000;
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Settle ");
  lcd.setBacklight(YELLOW);
  lcd.setCursor(0,1);
  float starttime = millis();
  Alarm.delay(100);
  while (((millis()-starttime)<duration)){
    int timedisplay = round((duration-(millis()-starttime))/60/1000);
    Alarm.delay(10000);
  lcd.setCursor(0,1);
  lcd.print(timedisplay);lcd.print("min  ");} 
}

void decant(float duration){ // decant by time
  duration=duration*60*1000;
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Decant ");
  lcd.setBacklight(RED);
  float starttime = millis();
  Alarm.delay(100);
  while (((millis()-starttime)<duration)){
    digitalWrite(decantvalves, HIGH); //opens the ball valves
    int timedisplay = round((duration-(millis()-starttime))/60/1000);
    Alarm.delay(10000);
  lcd.setCursor(0,1);
  lcd.print(timedisplay);lcd.print("min  ");} 
}
  digitalWrite(decantvalves, LOW); //closes the ball valves
  
}
void rest(float longt){ //everything off 
  longt=longt*60*1000;
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("REST ");
  lcd.setBacklight(VIOLET);
  float starttime = millis();
  Alarm.delay(100);
   while ((millis()-starttime)<longt){
    float timedisplay = round((longt-(millis()-starttime))/60/1000);
     lcd.setCursor(0,1);
  lcd.print(timedisplay);lcd.print("min  ");
    //Alarm.delay(1000);}
    digitalWrite(stir, LOW);
}
//This is a general stepper function that can be used for any stepper attached
void stepper(int num, int motor, int direct){
  if (motor == 1){
    digitalWrite(en1, LOW); 
    if (direct == 1){
      digitalWrite(dir1, HIGH);}//empty
      else if (direct ==2){
        digitalWrite(dir1, LOW);}// fill
    for (int i=0; i<num; i++){
      digitalWrite(step1, HIGH);
      Alarm.delay(3);
      digitalWrite(step1, LOW);
      Alarm.delay(3);
  }
  digitalWrite(en1, HIGH);
}
}

//calls stepper function above to remove sludge automatically
void sludgeremoval(){
  stepper(6400,1,2);//fills up tube. revolutions, 1st motor, "empty" dir
  stepper(1875,1,2);//empties into sludge container (2500 steps, now 1875). revolutions, 1st motor, "empty" dir 2500 steps = 1 gal per week. 1875=.75 gal/wk
  stepper(6400,1,1);//empty tube back into sbr. revolutions, 1st motor, "fill" dir
}

////// This is what happens when resting //////
void idle(){
  aeration(5);
  rest(55);
  aeration(5);
  rest(55);
  
}

///////// THIS IS THE SEQUENCE THAT MATTERS /////////
void normalsequence(){
  DateTime now = rtc.now();
  realstarttime = now.unixtime();
  fill(insert minutes to fill);
  now = rtc.now();
  Alarm.delay(2000);
  thirtysecaeration(60);
  Alarm.delay(2000);
  oneonthreeoffair(60);
  Alarm.delay(2000);
  halftimeair(60);
  Alarm.delay(2000);
  aeration(60);
  Alarm.delay(2000);
  settle(120);
  Alarm.delay(2000);
  decant(insert minutes to decant);
  Alarm.delay(2000);
  idle();
  Alarm.delay(2000);
 
}


// put your main code here, to run repeatedly:
void loop() {
  DateTime now = rtc.now();
  float current = now.unixtime();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(daysOfTheWeek[now.dayOfTheWeek()]);
  Alarm.delay(100);
  lcd.setCursor(0,1);
  while (x<1){//////////////If something gets off and you want to run a small part of the code put it in this while loop
   /////////////////Everything in here only runs once/////////////////////
  decant(2); 
 x++;}


//this section triggers the sequence at midnight
 if(now.hour() == 00 && now.minute() == 00){
      for (int i = 0; i < 3; i++){
      normalsequence();
      }
  }
